name: action.yml autodoc
description: action.yml doc generator
author: jackton1
inputs:
  filename:
    description: 'Path to the yaml file'
    required: false
    default: action.yml
  col_max_width:
    description: 'Max width of a column'
    required: false
    default: '1000'
  col_max_words:
    description: 'Max number of words per line in a column'
    required: false
    default: '6'
  output:
    description: 'Path to the output file'
    required: false
    default: README.md
  input_columns:
    description: 'List of Input columns names to display, default (display all columns)'
    required: false
  output_columns:
    description: 'List of Output column names to display, default (display all columns)'
    required: false
  reusable_output_columns:
    description: 'List of Output column names to display, default (display all columns)'
    required: false
  secrets_columns:
    description: 'List of Secrets column names to display, default (display all columns)'
    required: false
  bin_path:
    description: 'Path to the auto-doc binary'
    required: false
  reusable:
    description: 'Is the yaml file a reusable workflow'
    required: false

runs:
  using: 'composite'
  steps:
    - run: |
        EXTRA_ARGS=""
        BIN_PATH="${{ inputs.bin_path }}"
        REUSABLE="${{ inputs.reusable }}"
        INPUT_COLUMNS=(${{ inputs.input_columns }})
        OUTPUT_COLUMNS=(${{ inputs.output_columns }})
        SECRETS_COLUMNS=(${{ inputs.secrets_columns }})
        REUSABLE_OUTPUT_COLUMNS=(${{ inputs.reusable_output_columns }})

        if [[ ! -f "${{ inputs.filename }}" ]]; then
          echo "::warning::No file found at: ${{ inputs.filename }}"
          exit 0
        fi
  
        for input_column in ${INPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --inputColumns ${input_column}"
        done
  
        for output_column in ${OUTPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --outputColumns ${output_column}"
        done
        
        for output_column in ${REUSABLE_OUTPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --reusableOutputColumns ${output_column}"
        done

        for secret_column in ${SECRETS_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --secretsColumns ${secret_column}"
        done

        if [[ "$REUSABLE" == "true" ]]; then
          EXTRA_ARGS="${EXTRA_ARGS} --reusable"
        fi

        if [[ -z "$BIN_PATH" ]]; then
          TEMP_DIR=$(mktemp -d)
          curl -sf https://gobinaries.com/github.com/tj-actions/auto-doc | PREFIX=$TEMP_DIR sh
          BIN_PATH="$TEMP_DIR/auto-doc"
        fi

        echo "::debug::Generating documentation using ${BIN_PATH}..."
        echo "::debug::Extra args: ${EXTRA_ARGS}"
  
        $BIN_PATH --filename="${{ inputs.filename }}" --output="${{ inputs.output }}" \
          --colMaxWidth="${{ inputs.col_max_width }}" --colMaxWords="${{ inputs.col_max_words }}" \
          ${EXTRA_ARGS} && exit_status=$? || exit_status=$?

        rm -f $BIN_PATH
  
        if [[ $exit_status -ne 0 ]]; then
          echo "::warning::Error occurred running auto-doc"
          exit $exit_status;
        fi
      shell: bash

branding:
  icon: file-text
  color: white
